import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import CriarTarefa from "../components/CriarTarefa";
import styles from "../styles/Home.module.css";

export default function Home() {

  let [tarefas, setTarefas] = useState([]);
  let [nomeTarefa, setNomeTarefa] = useState("");
  let [messageError, setMessageError] = useState("");
  let [heightList, setHeightList] = useState("6vh");
  let [alertOpacity, setAlertOpacity] = useState(1);
  let [errorHeight, setErrorHeight] = useState("0px");
  let [errorPadding, setErrorPadding] = useState("0px");
  let [erroOpacity, setErroOpacity] = useState("0");

  useEffect(() => {
    let message = window.document.querySelector("#MessageContent");
    message.innerHTML = messageError;
  }, [errorHeight, messageError]);

  function removeTask(event) {
    let catchTaskName = event.target.alt;
    let splitTaskName = catchTaskName.split("@");
    let taskToExcludes = splitTaskName[1];
    setTimeout(() => {
      setTarefas(tarefas.filter((item) => item.key !== taskToExcludes));
    }, 600);
  }

  function seeTaskExclusivity(array = [], taskDisplay) {
    let truer = 0;

    if (!array === [] && !taskDisplay === undefined) {
      return false;
    }

    array.forEach((element) => {
      if (element.key === taskDisplay.key) {
        truer += 1;
      }
    });

    if (truer !== 0) {
      setMessageError("Essa tarefa já foi adicionada a lista.");
      setErroOpacity("1");
      setErrorPadding("");

      return setErrorHeight("67px");
    }
    setErroOpacity("0");
    setErrorPadding("0px");
    setErrorHeight("0px");

    return true;
  }

  function createTaskDisplay(taskName) {
    if (taskName === undefined) {
      return false;
    }

    let marginha = "-10%";
    let opacidadezinha = "0";

    return (
      <CriarTarefa
        tarefa={taskName}
        key={taskName}
        marginTop={marginha}
        opacity={opacidadezinha}
      />
    );
  }

  function addTask(taskName) {
    if (taskName !== undefined && taskName !== "") {
      let agora = createTaskDisplay(taskName);

      if (seeTaskExclusivity(tarefas, agora) === true) {
        if (heightList === "6vh") {
          setAlertOpacity("0");
          setHeightList("");
          setTimeout(() => {
            setTarefas((arr) => [...tarefas, agora]);
          }, 500);
        } else {
          setTarefas((arr) => [...tarefas, agora]);
        }

        setNomeTarefa("");
      }
    } else {
      setMessageError("Tarefa não atribuida");
      setErroOpacity("1");

      setErrorPadding("");
      setErrorHeight("67px");
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Lista de Tarefas</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Lista de Tarefas</h1>

        <div className={styles.inputContainer}>
          <input
            minLength={5}
            maxLength={20}
            type="text"
            placeholder="Digite a tarefa"
            value={nomeTarefa}
            onChange={(e) => {
              if (!e.target.value.includes("@")) {
                setNomeTarefa(e.target.value);
              }
            }}
            onKeyPress={(e) => {
              if (e.charCode === 13) {
                addTask(nomeTarefa);
              }
            }}
          />

          <button
            type="button"
            onClick={(e) => {
              addTask(nomeTarefa);
            }}
          >
            {" "}
            Criar tarefa{" "}
          </button>
        </div>

        <div
          id="MessageShow"
          style={{
            height: `${errorHeight}`,
            overflow: "hidden",
            padding: `${errorPadding}`,
            opacity: `${erroOpacity}`,
          }}
          className={styles.error}
        >
          <p id="MessageContent">Essa tarefa já foi adicionada a lista.</p>
        </div>

        <h2>Tarefas:</h2>

        <div
          className={styles.listaTarefas}
          onClick={(e) => {
            if (e.target.alt) {
              removeTask(e);

              if (tarefas.length <= 1) {
                setHeightList("6vh");

                setTimeout(() => setAlertOpacity("1"), 650);
              }
            }
          }}
          style={{ height: `${heightList}` }}
        >
          {tarefas.length >= 1 ? (
            tarefas
          ) : (
            <p
              style={{
                margin: "10px",
                color: "red",
                opacity: `${alertOpacity}`,
                transition: "all 0.5s",
              }}
            >
              Ops, ainda não há nenhuma tarefa aqui :/
            </p>
          )}
        </div>
      </main>

      <footer className={styles.footer}>
        <div>
          <a
            href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
            className={styles.containerLogo}
          >
            Powered by
            <Image
              src="/vercel.svg"
              alt="Vercel Logo"
              width={72}
              height={16}
              className={styles.logo}
            />
          </a>
        </div>
        <div>
          <a 
            ref="https://github.com/vieiracodes" 
            target="_blank"
            rel="noopener noreferrer"

          >
            Create by
            <Image
              src="/logo-vieiracodes.svg"
              alt="Vieira Codes Logo"
              width={72}
              height={32}
              className={styles.logo}
            />
          </a>
        </div>
      </footer>
    </div>
  );
}
